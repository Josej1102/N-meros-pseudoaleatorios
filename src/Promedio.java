
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Jose
 */
public class Promedio extends javax.swing.JFrame {

    /**
     * Creates new form Promedio
     */
    double sumatoria =0, promedio, z;
    public static String tipo;
    public static DefaultTableModel tabla;
    public Promedio() {
        initComponents();
        this.setLocationRelativeTo(null);   
        tabla = new DefaultTableModel();
        tabla.addColumn("promedio");
        tabla.addColumn("z0");
        tabla.addColumn("z");
        this.Resultadosvvv.setModel(tabla);     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultadosvvv = new javax.swing.JTable();
        Calcular = new javax.swing.JButton();
        Salida = new javax.swing.JTextField();
        Exportarvvv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PRUEBA DE PROMEDIO");

        Resultadosvvv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Resultadosvvv.setEnabled(false);
        jScrollPane1.setViewportView(Resultadosvvv);

        Calcular.setText("Calcular");
        Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcularActionPerformed(evt);
            }
        });

        Salida.setPreferredSize(new java.awt.Dimension(70, 22));
        Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalidaActionPerformed(evt);
            }
        });

        Exportarvvv.setText("Exportar a Excel");
        Exportarvvv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportarvvvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Calcular)
                    .addComponent(Salida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exportarvvv, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Exportarvvv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Calcular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Salida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(31, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcularActionPerformed
        // TODO add your handling code here:
        while(tabla.getRowCount()>0){
            tabla.removeRow(0);
        }
        
        ArrayList<Double> datos = new ArrayList<>();
       if(tipo == "Mixto"){
        int contador = Mixto.tabla.getRowCount();
        for(int i=0; i<contador; i++){
            Object valores = Mixto.tabla.getValueAt(i, 1);
            double convertir = Double.parseDouble(valores.toString());
            datos.add(convertir);
        }
       
        for(int j=0; j<contador; j++){
            sumatoria += datos.get(j);
        }
        promedio = sumatoria/contador;
        z = Math.abs(((promedio - 0.5)*Math.sqrt(contador))/Math.sqrt(0.8333333));
        
        tabla.addRow(new Object[]{promedio,z,1.96});
        if(z<1.96){
            Salida.setText("Correcto");
        }else{
            Salida.setText("Incorrecto");
        }}
       if(tipo == "Multiplicativo"){
        int contador = Multiplicativo.tabla.getRowCount();
        for(int i=0; i<contador; i++){
            Object valores = Multiplicativo.tabla.getValueAt(i, 1);
            double convertir = Double.parseDouble(valores.toString());
            datos.add(convertir);
        }
       
        for(int j=0; j<contador; j++){
            sumatoria += datos.get(j);
        }
        promedio = sumatoria/contador;
        z = Math.abs(((promedio - 0.5)*Math.sqrt(contador))/Math.sqrt(0.8333333));
        
        tabla.addRow(new Object[]{promedio,z,1.96});
        if(z<1.96){
            Salida.setText("Correcto");
        }else{
            Salida.setText("Incorrecto");
        }
       }
       if(tipo == "Fibonacci"){
        int contador = Fibonacci.tabla.getRowCount();
        for(int i=0; i<contador; i++){
            Object valores = Fibonacci.tabla.getValueAt(i, 1);
            double convertir = Double.parseDouble(valores.toString());
            datos.add(convertir);
        }
       
        for(int j=0; j<contador; j++){
            sumatoria += datos.get(j);
        }
        promedio = sumatoria/contador;
        z = Math.abs(((promedio - 0.5)*Math.sqrt(contador))/Math.sqrt(0.8333333));
        
        tabla.addRow(new Object[]{promedio,z,1.96});
        if(z<1.96){
            Salida.setText("Correcto");
        }else{
            Salida.setText("Incorrecto");
        }}
       if(tipo == "Cuadratico"){
        int contador = Cuadrático.tabla.getRowCount();
        for(int i=0; i<contador; i++){
            Object valores = Cuadrático.tabla.getValueAt(i, 1);
            double convertir = Double.parseDouble(valores.toString());
            datos.add(convertir);
        }
       
        for(int j=0; j<contador; j++){
            sumatoria += datos.get(j);
        }
        promedio = sumatoria/contador;
        z = Math.abs(((promedio - 0.5)*Math.sqrt(contador))/Math.sqrt(0.8333333));
        
        tabla.addRow(new Object[]{promedio,z,1.96});
        if(z<1.96){
            Salida.setText("Correcto");
        }else{
            Salida.setText("Incorrecto");
        }}
       if(tipo == "Aditivo"){
        int contador = Aditivo.tabla.getRowCount();
        for(int i=0; i<contador; i++){
            Object valores = Aditivo.tabla.getValueAt(i, 1);
            double convertir = Double.parseDouble(valores.toString());
            datos.add(convertir);
        }
       
        for(int j=0; j<contador; j++){
            sumatoria += datos.get(j);
        }
        promedio = sumatoria/contador;
        z = Math.abs(((promedio - 0.5)*Math.sqrt(contador))/Math.sqrt(0.8333333));
        
        tabla.addRow(new Object[]{promedio,z,1.96});
        if(z<1.96){
            Salida.setText("Correcto");
        }else{
            Salida.setText("Incorrecto");
        }}
    }//GEN-LAST:event_CalcularActionPerformed

    private void SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalidaActionPerformed

    private void ExportarvvvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportarvvvActionPerformed
        // TODO add your handling code here:
        ExportarExcel obj;
        try {
            obj = new ExportarExcel();
            obj.exportarExcel(Resultadosvvv);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al exportar"+ex);
        }
    }//GEN-LAST:event_ExportarvvvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Promedio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Promedio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Promedio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Promedio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Promedio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Calcular;
    private javax.swing.JButton Exportarvvv;
    private javax.swing.JTable Resultadosvvv;
    private javax.swing.JTextField Salida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
